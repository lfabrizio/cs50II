//check 50 revisions needed to clean 
// c = cipher,  k = key, p = sentence or text/word to encrypt, n = number of letters in alphabet
//mod length of k(key)
//intletter + int keyletter mod by 26  ==> return a ciphered letter as a number

#include <stdio.h> //fgets() and printf
#include <string.h> //strlen()
#include <ctype.h> // such as isupper and islower
#include <cs50.h> //cs50 library
#include <stdlib.h>

bool validate_key(string key); // declared

int main(int argc, string argv[])
{    // must meet conditions right away or re-prompt
    if (!(argc == 2 && validate_key(argv[1])))
    {
        printf("Please enter a character: \n");
        return 1;
    }
    //convert to type of integer(same as caesar except change from int to string
    string key = argv[1];
    
    string plaintext;
    do
    {
        // get string prompts user for a line of text from stdin and returns it as a string 
        plaintext = get_string("plaintext: ");
    }
    while (plaintext == NULL);
    
    printf("ciphertext: ");
   //Iterate through plaintext to generate the cipher and check upper/lower respectfully
    for (int i = 0, k = 0, len = strlen(plaintext), lenk = strlen(key); i < len; i++)
    {
        if (isupper(plaintext[i])) // range of A - Z + key % 26
        {
            printf("%c", ((plaintext[i] - 'A' + toupper(key[k]) - 'A') % 26 + 'A'));
           
            k = (k + 1) % lenk;
 
        }
        else if (islower(plaintext[i])) // range of lower in ascii and key then 
        {
            printf("%c", ((plaintext[i] - 'a' + tolower(key[k]) - 'a') % 26 + 'a'));
            k = (k + 1) % lenk; 
       
        }
        else
        {
            printf("%c", plaintext[i]);         
        }
    }
    printf("\n");
}

bool validate_key(string key)
{
// if at any point the character is not an alphabet chr then end  
    for (int i = 0, len = strlen(key); i < len; i++)
    { 
        // if the input is not an "isalpha" alphabetical then return false
        if (!(isalpha(key[i])))
        {
            return false;  
        }               
    }
    return true;           
}
